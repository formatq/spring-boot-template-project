/*
 * This file is generated by jOOQ.
 */
package org.formatq.spring.db.jooq.tables.daos;


import java.util.List;
import java.util.UUID;

import org.formatq.spring.db.jooq.tables.ExampleTable;
import org.formatq.spring.db.jooq.tables.records.ExampleTableRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExampleTableDao extends DAOImpl<ExampleTableRecord, org.formatq.spring.db.jooq.tables.pojos.ExampleTable, Long> {

    /**
     * Create a new ExampleTableDao without any configuration
     */
    public ExampleTableDao() {
        super(ExampleTable.EXAMPLE_TABLE, org.formatq.spring.db.jooq.tables.pojos.ExampleTable.class);
    }

    /**
     * Create a new ExampleTableDao with an attached configuration
     */
    public ExampleTableDao(Configuration configuration) {
        super(ExampleTable.EXAMPLE_TABLE, org.formatq.spring.db.jooq.tables.pojos.ExampleTable.class, configuration);
    }

    @Override
    public Long getId(org.formatq.spring.db.jooq.tables.pojos.ExampleTable object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.formatq.spring.db.jooq.tables.pojos.ExampleTable> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ExampleTable.EXAMPLE_TABLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<org.formatq.spring.db.jooq.tables.pojos.ExampleTable> fetchById(Long... values) {
        return fetch(ExampleTable.EXAMPLE_TABLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public org.formatq.spring.db.jooq.tables.pojos.ExampleTable fetchOneById(Long value) {
        return fetchOne(ExampleTable.EXAMPLE_TABLE.ID, value);
    }

    /**
     * Fetch records that have <code>SOME_UUID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.formatq.spring.db.jooq.tables.pojos.ExampleTable> fetchRangeOfSomeUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ExampleTable.EXAMPLE_TABLE.SOME_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>SOME_UUID IN (values)</code>
     */
    public List<org.formatq.spring.db.jooq.tables.pojos.ExampleTable> fetchBySomeUuid(UUID... values) {
        return fetch(ExampleTable.EXAMPLE_TABLE.SOME_UUID, values);
    }

    /**
     * Fetch records that have <code>NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.formatq.spring.db.jooq.tables.pojos.ExampleTable> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(ExampleTable.EXAMPLE_TABLE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<org.formatq.spring.db.jooq.tables.pojos.ExampleTable> fetchByName(String... values) {
        return fetch(ExampleTable.EXAMPLE_TABLE.NAME, values);
    }

    /**
     * Fetch records that have <code>COUNT BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.formatq.spring.db.jooq.tables.pojos.ExampleTable> fetchRangeOfCount(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ExampleTable.EXAMPLE_TABLE.COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>COUNT IN (values)</code>
     */
    public List<org.formatq.spring.db.jooq.tables.pojos.ExampleTable> fetchByCount(Long... values) {
        return fetch(ExampleTable.EXAMPLE_TABLE.COUNT, values);
    }
}
