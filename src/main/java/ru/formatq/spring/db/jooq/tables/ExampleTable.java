/*
 * This file is generated by jOOQ.
 */
package ru.formatq.spring.db.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.formatq.spring.db.jooq.DefaultSchema;
import ru.formatq.spring.db.jooq.Indexes;
import ru.formatq.spring.db.jooq.Keys;
import ru.formatq.spring.db.jooq.tables.records.ExampleTableRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExampleTable extends TableImpl<ExampleTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>EXAMPLE_TABLE</code>
     */
    public static final ExampleTable EXAMPLE_TABLE = new ExampleTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExampleTableRecord> getRecordType() {
        return ExampleTableRecord.class;
    }

    /**
     * The column <code>EXAMPLE_TABLE.ID</code>.
     */
    public final TableField<ExampleTableRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>EXAMPLE_TABLE.SOME_UUID</code>.
     */
    public final TableField<ExampleTableRecord, UUID> SOME_UUID = createField(DSL.name("SOME_UUID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>EXAMPLE_TABLE.NAME</code>.
     */
    public final TableField<ExampleTableRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>EXAMPLE_TABLE.COUNT</code>.
     */
    public final TableField<ExampleTableRecord, Long> COUNT = createField(DSL.name("COUNT"), SQLDataType.BIGINT.nullable(false), this, "");

    private ExampleTable(Name alias, Table<ExampleTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExampleTable(Name alias, Table<ExampleTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>EXAMPLE_TABLE</code> table reference
     */
    public ExampleTable(String alias) {
        this(DSL.name(alias), EXAMPLE_TABLE);
    }

    /**
     * Create an aliased <code>EXAMPLE_TABLE</code> table reference
     */
    public ExampleTable(Name alias) {
        this(alias, EXAMPLE_TABLE);
    }

    /**
     * Create a <code>EXAMPLE_TABLE</code> table reference
     */
    public ExampleTable() {
        this(DSL.name("EXAMPLE_TABLE"), null);
    }

    public <O extends Record> ExampleTable(Table<O> child, ForeignKey<O, ExampleTableRecord> key) {
        super(child, key, EXAMPLE_TABLE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_EXAMPLE_TABLE_SOME_UUID);
    }

    @Override
    public Identity<ExampleTableRecord, Long> getIdentity() {
        return (Identity<ExampleTableRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExampleTableRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public List<UniqueKey<ExampleTableRecord>> getKeys() {
        return Arrays.<UniqueKey<ExampleTableRecord>>asList(Keys.CONSTRAINT_4);
    }

    @Override
    public ExampleTable as(String alias) {
        return new ExampleTable(DSL.name(alias), this);
    }

    @Override
    public ExampleTable as(Name alias) {
        return new ExampleTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExampleTable rename(String name) {
        return new ExampleTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExampleTable rename(Name name) {
        return new ExampleTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, UUID, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
